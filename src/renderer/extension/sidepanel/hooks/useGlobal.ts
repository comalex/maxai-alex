import { useContext } from "react";
import { PageName } from "../../config/types";
import { CurrentPageContext, type GlobalContext } from "../../sidepanel/context";

interface UseGlobal extends GlobalContext {
  // updateActivePage: () => Promise<void>;
}

export function useGlobal(): UseGlobal {
  const {
    activePage,
    setActivePage,
    isDebugMode,
    models,
    setModels,
    setDebugMode,
    setUserId,
    userId,
    activeTab,
    setActiveTab,
    debugMessage,
    logger,
    selectedModel,
    setSelectedModel,
    jwtToken,
    chatJwtToken,
    accountId,
    setAccountId,
    accountName,
    setAccountName,
    agency,
    updateAgency,
    payments,
    setPayments,
    account,
    updateAccount,
    currentUrl,
    setCurrentUrl,
    user,
    setUser,
    chatter,
    content,
    setContent,
    userUUID,
    shiftId,
    setShiftId,
    customVaultId,
    setCustomVaultId,
    lastFanSpend,
    setLastFanSpend,
    customAccountName,
    setCustomAccountName,
    checkProcessingStatus,
    autoPlayState,
    setAutoPlayState,
    expandSimulateBlock,
    setExpandSimulateBlock,
    autoGenerateResponseState,
    setAutoGenerateResponseState,
    refreshOfPage,
    voiceGenAbility,
    globalNotificationMode,
    globalNotificationMessage,
    maintenanceFrom,
    maintenanceTo,
    currentWebviewId,
  } = useContext(CurrentPageContext);

  const _setActivePage = (page: PageName) => {
    console.log("Set page", page);
    setActivePage(page);
  };

  return {
    activePage,
    // updateActivePage,
    setActivePage: _setActivePage,
    isDebugMode,
    setDebugMode,
    models,
    setModels,
    userId,
    setUserId,
    activeTab,
    setActiveTab,
    debugMessage,
    logger,
    selectedModel,
    setSelectedModel,
    jwtToken,
    chatJwtToken,
    accountId,
    setAccountId,
    agency,
    updateAgency,
    payments,
    setPayments,
    account,
    updateAccount,
    currentUrl,
    setCurrentUrl,
    accountName,
    setAccountName,
    user,
    setUser,
    chatter,
    content,
    setContent,
    userUUID,
    shiftId,
    setShiftId,
    customVaultId,
    setCustomVaultId,
    lastFanSpend,
    setLastFanSpend,
    checkProcessingStatus,
    customAccountName,
    setCustomAccountName,
    autoPlayState,
    setAutoPlayState,
    expandSimulateBlock,
    setExpandSimulateBlock,
    autoGenerateResponseState,
    setAutoGenerateResponseState,
    refreshOfPage,
    voiceGenAbility,
    globalNotificationMode,
    globalNotificationMessage,
    maintenanceFrom,
    maintenanceTo,
    currentWebviewId,
  };
}
